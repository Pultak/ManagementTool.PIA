@inherits LayoutComponentBase

@using ManagementTool.Shared.Models.AppState
@using ManagementTool.Shared.Models.Login
@implements IDisposable

@inject HttpClient Http
@inject NavigationManager UriHelper;
@inject ILogger<MainLayout> Logger
@inject StateContainer<LoggedUserPayload> UserContainer 

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <div class="top-row px-4">
            @if (LoggedUserName != null) {
                <span class="text-nowrap">
                    Vítej @LoggedUserName!
                </span>
                <button @onclick="ChangePwdPressed">Změna hesla</button>
                <button @onclick="LogoutPressed">Odhlásit se</button>

            }
        </div>
        <article class="content px-4">
            @if (UserContainer.Value == null) {
                <LoginPrompt/>
            }
            else {
                <CascadingValue Value="@LoggedUserName">
                    @Body
                </CascadingValue>

            }
        </article>
    </main>
</div>


@code {
    public string? LoggedUserName { get; set; } = null;

    public void LogoutPressed() {
        var response = Http.GetFromJsonAsync<IActionResult>("auth");
        LoggedUserName = null;
        UriHelper.NavigateTo("/");
        UserContainer.SetValue(null);
        // UriHelper.NavigateTo(UriHelper.Uri, forceLoad: true);
        StateHasChanged();
    }

    public void ChangePwdPressed() {
        UriHelper.NavigateTo("/pwdChange");
    }
    

    protected override async Task OnInitializedAsync() {
        UserContainer.SetValue(null);
        Logger.LogDebug("OnInitializeAsync - HTTP GET logged in user");
        //is there already someone logged in?
        var response = await Http.GetFromJsonAsync<LoggedUserPayload>("auth/info");
        LoggedUserName = response?.UserName;
        
        UserContainer.SetValue(response);
        if (response == null) {
            //no one is logged in, lets get back to root
            UriHelper.NavigateTo("/");
        }
        else {
            if (response.HasInitPwd) {
                UriHelper.NavigateTo("/pwdChange/1");
            }

        }
        StateHasChanged();
    }

    protected override void OnInitialized() {
        UserContainer.OnStateChange += StateHasChanged;
    }
    public void Dispose() {
        UserContainer.OnStateChange -= StateHasChanged;
    }
}
