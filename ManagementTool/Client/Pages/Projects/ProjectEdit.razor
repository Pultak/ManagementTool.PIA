@page "/projects/edit/{ReturnEndpoint:int}"

@using ManagementTool.Client.Utils
@using ManagementTool.Shared.Models.Presentation
@using ManagementTool.Shared.Models.Presentation.Api.Payloads
@using ManagementTool.Shared.Models.Utils
@using ManagementTool.Shared.Utils
@using System.ComponentModel.DataAnnotations
@inherits InteractivePageBase<ProjectEdit>

@inject StateContainer<ProjectInfoPayload> ProjectContainer
@inject HttpClient Http

<button @onclick="Return">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
    </svg>
</button>

<!-- Only Secretariat, Project manager and Department manager can edit project info-->
@if (!IsAuthorized) {
    <div>Vypadá to, že nemáte dostatečné práva na zobrazení této stránky!</div>
}
else {
    @if (WaitingForApiResponse) {
        <div class="spinner"></div>
    }
    else {
        @if (NewProjectCreation) {
            <h3>Vytváření nového projektu</h3>
        }
        else {
            <h3>Editace projektu</h3>
        }
        <div>
            <section>
                <EditForm id="@SubmitBtnId" EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                    <DataAnnotationsValidator/>

                    <div>
                        <p>
                            <label>
                                Název projektu
                            </label>
                            <InputText id="txtName" type="text" required @bind-Value="@SelectedProject.Project.ProjectName"/>
                            <ValidationMessage For="@(() => SelectedProject.Project.ProjectName)"/>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label>
                                Datum od
                            </label>
                            <input id="txtDate" type="date" @bind-value="@SelectedProject.Project.FromDate" min="01/01/1970" placeholder="dd/MM/yyyy" required />
                            <ValidationMessage For="@(() => SelectedProject.Project.FromDate)" />
                        </p>
                    </div>
                    <div>
                        <p>
                            <label>
                                Datum do
                            </label>
                            <input id="txtDate" type="date" @bind-value="@SelectedProject.Project.ToDate" min="1970-01-01" placeholder="dd/MM/yyyy" />
                            <ValidationMessage For="@(() => SelectedProject.Project.ToDate)" />
                        </p>
                    </div>

                    <div>
                        <p>
                            <label>
                                Popisek projektu
                            </label>
                            <textarea id="txtName" type="text" required @bind="@SelectedProject.Project.Description" @bind:event="oninput">
                            </textarea>
                            <ValidationMessage For="@(() => SelectedProject.Project.Description)" />
                        </p>
                    </div>


                    <div>
                        <p>
                            <label>
                                Přiřazený projektový manažer
                            </label>
                            <select @onchange="@OnSelectedProjectManagerChange">
                                <option value=0 disabled selected hidden>
                                    @if (NewProjectCreation) {
                                        <b>[uživatel zatím nezvolen]</b>
                                    }
                                    else {
                                        @SelectedProject.ManagerName
                                    }

                                </option>
                                @foreach (var assignee in AllUsers) {
                                    <option value="@assignee.Id">
                                        @assignee.FullName
                                    </option>
                                }
                            </select>
                            <ValidationMessage For="@(() => SelectedManagerId)"/>
                        </p>
                    </div>
                    

                </EditForm>

                @if (ExceptionMessage != null) {
                    <div>
                        <p>@ExceptionMessage</p>
                    </div>
                }
                <p>
                    @if (NewProjectCreation) {
                        <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Vytvořit projekt</button>
                    }
                    else {
                        <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Uložit změny</button>
                    }
                    <button type="button" class="btn btn-light"
                            @onclick="@Return">
                        Zrušit
                    </button>
                </p>

            </section>
        </div>
    }
}


@code {

    [Parameter]
    public int ReturnEndpoint { get; set; }

    private EditContext? EditContext { get; set; }
    public ProjectInfoPayload SelectedProject { get; set; } = new();

    private UserBasePL[] AllUsers = Array.Empty<UserBasePL>();

    [Required(ErrorMessage = "Manažer musí být vyplněný!")]
    private string? SelectedManagerId { get; set; }


    private bool NewProjectCreation { get; set; }

    protected override void OnInitialized() {
        ReturnUri = $"/projects/{(ProjectPage)ReturnEndpoint}".ToLower();
        NeededRoles = new[] { RoleType.DepartmentManager, RoleType.ProjectManager, RoleType.Secretariat };
        if (ProjectContainer.Value == null) {
            NewProjectCreation = true;
            SelectedProject = new ProjectInfoPayload {
                Project = new ProjectPL {
                        FromDate = DateTime.Now.Date
                }
            };
        }
        else {
            SelectedProject = ProjectContainer.Value;
            SelectedManagerId = SelectedProject.ProjectManagerId.ToString();
        }
        EditContext = new EditContext(SelectedProject);
    }

    protected override async Task OnInitializedAsync() {
        if (IsAuthorized) {
            var result = await Http.SendApiGetRequestAsync<UserBasePL[]>(Logger, "api/Users");
            if (result.status != ApiHttpResponse.Ok) {
                ExceptionMessage = StringResolver.ResolveApiResponse(result.status);
            }
            else if (result.response != null) {
                AllUsers = result.response;
            }
        }
        await base.OnInitializedAsync();
    }
    
    private void OnSelectedProjectManagerChange(ChangeEventArgs evt) {
        if (evt.Value is not string idString) {
            return;
        }
        SelectedManagerId = idString;
        var id = long.Parse(idString);
        SelectedProject.ProjectManagerId = id;
    }

    private void HandleValidSubmit() {
        var valResult = ProjectUtils.ValidateNewProject(SelectedProject.Project);
        if (valResult != ProjectCreationResponse.Ok) {
            ExceptionMessage = StringResolver.ResolveProjectValidation(valResult);
        }
        else if (SelectedManagerId == null) {
            ExceptionMessage = "Musí být zvolen manažer!";
        }
        else {
            WaitingForApiResponse = true;
            
            if (NewProjectCreation) {
                SendApiPostRequest("api/Projects");
            }
            else if (EditContext?.IsModified() ?? false) {
                SendApiPatchRequest("api/Projects");
            }
            else {
                WaitingForApiResponse = false;
                ExceptionMessage = "Nejdříve změnte nějaké hodnoty předtím než budete ukládat změny!";
            }
        }
        StateHasChanged();
    }

    protected void HandleInvalidSubmit() {
        ExceptionMessage = "Můžete vkládat pouze validní data!";
        StateHasChanged();
    }


    private async void SendApiPostRequest(string endpoint) {
        var apiResponse = await Http.SendApiPostRequest(Logger, endpoint, SelectedProject);
        ResolveResponse(apiResponse);
    }

    private async void SendApiPatchRequest(string endpoint) {
        var apiResponse = await Http.SendApiPatchRequest(Logger, endpoint, SelectedProject);
        ResolveResponse(apiResponse);
    }

    /// <summary>
    /// Method used to resolve the asynchronous call of the httpClient
    /// </summary>
    /// <param name="apiResponse">response from the httpClient</param>
    /// <param name="changePage">indicator to change page if requested</param>
    private void ResolveResponse(ApiHttpResponse apiResponse) {
        WaitingForApiResponse = false;
        if (apiResponse == ApiHttpResponse.Ok) {
            Return();
        }
        else {
            ExceptionMessage = StringResolver.ResolveApiResponse(apiResponse);
            StateHasChanged();
        }
    }

}