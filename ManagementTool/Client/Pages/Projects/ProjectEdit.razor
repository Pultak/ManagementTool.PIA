@page "/projects/edit/{ReturnEndpoint:int}"
@using ManagementTool.Shared.Models.Utils
@using ManagementTool.Shared.Utils
@using Microsoft.AspNetCore.Components
@using ManagementTool.Client.Utils
@using ManagementTool.Shared.Models.Presentation

@inherits InteractivePageBase<ProjectEdit>

@inject StateContainer<ProjectPL> ProjectContainer
@inject HttpClient Http

<button @onclick="Return">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
    </svg>
</button>

<!-- Only Secretariat, Project manager and Department manager can edit project info-->
@if (!IsAuthorized) {
    <div>Vypadá to, že nemáte dostatečné práva na zobrazení této stránky!</div>
}
else {
    @if (WaitingForApiResponse) {
        <div class="spinner"></div>
    }
    else {
        @if (NewProjectCreation) {
            <h3>Vytváření nového projektu</h3>
        }
        else {
            <h3>Editace projektu</h3>
        }
        <div>
            <section>
                <EditForm id="@SubmitBtnId" EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                    <DataAnnotationsValidator/>

                    <div>
                        <p>
                            <label>
                                Název projektu
                            </label>
                            <InputText id="txtName" type="text" required @bind-Value="SelectedProject.ProjectName"/>
                            <ValidationMessage For="@(() => SelectedProject.ProjectName)"/>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label>
                                Datum od
                            </label>
                            <input id="txtDate" type="date" @bind-value="SelectedProject.FromDate" min="01/01/1970" placeholder="dd/MM/yyyy" required />
                            <ValidationMessage For="@(() => SelectedProject.FromDate)"/>
                        </p>
                    </div>
                    <div>
                        <p>
                            <label>
                                Datum do
                            </label>
                            <input id="txtDate" type="date" @bind-value="SelectedProject.ToDate" min="1970-01-01" placeholder="dd/MM/yyyy" />
                            <ValidationMessage For="@(() => SelectedProject.ToDate)"/>
                        </p>
                    </div>

                    <div>
                        <p>
                            <label>
                                Popisek projektu
                            </label>
                            <InputText id="txtName" type="text" required @bind-Value="SelectedProject.Description"/>
                            <ValidationMessage For="@(() => SelectedProject.Description)"/>
                        </p>
                    </div>

                </EditForm>

                if (ExceptionMessage != null) {
                    <div>
                        <p>@ExceptionMessage</p>
                    </div>
                }
                <p>
                    @if (NewProjectCreation) {
                        <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Vytvořit projekt</button>
                    }
                    else {
                        <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Uložit změny</button>
                    }
                    <button type="button" class="btn btn-light"
                            @onclick="@Return">
                        Zrušit
                    </button>
                </p>

            </section>
        </div>
    }

}


@code {

    [Parameter]
    public int ReturnEndpoint { get; set; }
    
    private EditContext? EditContext { get; set; }
    public ProjectPL SelectedProject { get; set; } = new();
    
    private bool NewProjectCreation { get; set; }
    
    protected override void OnInitialized() {
        ReturnUri = $"/projects/{(EProjectPage)ReturnEndpoint}".ToLower();
        NeededRoles = new[] { ERoleType.DepartmentManager, ERoleType.ProjectManager, ERoleType.Secretariat };
        if (ProjectContainer.Value == null) {
            NewProjectCreation = true;
            SelectedProject = new ProjectPL(default, "", DateTime.Now.Date, null, "");
        }
        else {
            SelectedProject = ProjectContainer.Value;
        }
        EditContext = new EditContext(SelectedProject);
    }
    
    private void HandleValidSubmit() {
        var valResult = ProjectUtils.ValidateNewProject(SelectedProject);
        if (valResult != EProjectCreationResponse.Ok) {
            ExceptionMessage = StringResolver.ResolveProjectValidation(valResult);
        }
        else{
            WaitingForApiResponse = true;
            if (NewProjectCreation) {
                SendApiPutRequest("api/Projects");
            }
            else if (EditContext?.IsModified() ?? false){
                SendApiPatchRequest("api/Projects/update");
            }
            else {
                WaitingForApiResponse = false;
                ExceptionMessage = "Nejdříve změnte nějaké hodnoty předtím než budete ukládat změny!";
            }
        }
        StateHasChanged();
    }

    protected void HandleInvalidSubmit() {
        ExceptionMessage = "Můžete vkládat pouze validní data!";
        StateHasChanged();
    }


    private async void SendApiPutRequest(string endpoint) {
        var apiResponse = await Http.SendApiPutRequest(Logger, endpoint, SelectedProject);
        ResolveResponse(apiResponse);
    }

    private async void SendApiPatchRequest(string endpoint) {
        var apiResponse = await Http.SendApiPatchRequest(Logger, endpoint, SelectedProject);
        ResolveResponse(apiResponse);
    }

    private void ResolveResponse(EApiHttpResponse apiResponse) {
        WaitingForApiResponse = false;
        if (apiResponse == EApiHttpResponse.Ok) {
            Return();
        }
        else {
            ExceptionMessage = StringResolver.ResolveApiResponse(apiResponse);
            StateHasChanged();
        }
    }
}