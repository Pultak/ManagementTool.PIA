@page "/projects/edit"
@using ManagementTool.Shared.Models.AppState
@using ManagementTool.Shared.Models.Database
@using ManagementTool.Shared.Models.Utils
@using ManagementTool.Shared.Utils
@using Microsoft.AspNetCore.Components
@using ManagementTool.Client.Utils
@implements IDisposable


@inject EditProjectStateContainer ProjectContainer
@inject NavigationManager UriHelper
@inject HttpClient Http
@inject ILogger<ProjectEdit> Logger


<button class="bi bi-x" @onclick="ReturnToProjects">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
    </svg>
</button>
<h3>Editace projektu</h3>

@if (WaitingForApiResponse) {
    <div class="spinner"></div>
}
else {
    <div class="wrapper">
        <section class="createevent">
            <EditForm id="@SubmitBtnId" EditContext="@_editContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <DataAnnotationsValidator/>

                <div class="form-group">
                    <p>
                        <label>
                            Název projektu
                        </label>
                        <InputText id="txtName" type="text" required @bind-Value="SelectedProject.ProjectName"/>
                        <ValidationMessage For="@(() => SelectedProject.ProjectName)"/>
                    </p>
                </div>

                <div class="form-group">
                    <p>
                        <label>
                            Datum od
                        </label>
                        <input id="txtDate" type="date" @bind-value="SelectedProject.FromDate" min="01/01/1970" required/>
                        <ValidationMessage For="@(() => SelectedProject.FromDate)"/>
                    </p>
                </div>
                <div class="form-group">
                    <p>
                        <label>
                            Datum do
                        </label>
                        <input id="txtDate" type="date" @bind-value="SelectedProject.ToDate" min="1970-01-01"/>
                        <ValidationMessage For="@(() => SelectedProject.ToDate)"/>
                    </p>
                </div>

                <div class="form-group">
                    <p>
                        <label>
                            Popisek projektu
                        </label>
                        <InputText id="txtName" type="text" required @bind-Value="SelectedProject.Description"/>
                        <ValidationMessage For="@(() => SelectedProject.Description)"/>
                    </p>
                </div>

            </EditForm>

            @if (ValidationMessage != null) {
                <div>
                    <p>@ValidationMessage</p>
                </div>
            }
            else if (ApiException != null) {
                <div>
                    <p>@ApiException</p>
                </div>
            }
            <p>
                @if (NewProjectCreation) {
                    <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Vytvořit projekt</button>
                }
                else {
                    <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Uložit změny</button>
                }
                <button type="button" class="btn btn-light"
                        @onclick="@ReturnToProjects">
                    Zrušit
                </button>
            </p>

        </section>
    </div>
}



@code {

    private const string SubmitBtnId = "submitButton";

    private EditContext _editContext;
    public Project SelectedProject { get; set; } = new();
    
    private bool NewProjectCreation { get; set; }
    private bool WaitingForApiResponse { get; set; } = true;

    private string? ValidationMessage { get; set; }
    private string? ApiException { get; set; }


    protected override Task OnInitializedAsync() {
        WaitingForApiResponse = false;
        SelectedProject = ProjectContainer.Value;
        if (SelectedProject == null) {
            NewProjectCreation = true;
            SelectedProject = new Project(default, "", DateTime.Now.Date, null, "");
        }
        _editContext = new EditContext(SelectedProject);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void HandleValidSubmit() {
        ValidationMessage = null;
        ApiException = null;


        var valResult = ProjectUtils.ValidateNewProject(SelectedProject);
        if (valResult != EProjectCreationResponse.Ok) {
            ValidationMessage = StringResolver.ResolveProjectValidation(valResult);
        }
        else{
            WaitingForApiResponse = true;
            if (NewProjectCreation) {
                SendApiPutRequest("api/Projects");
            }
            else if (_editContext.IsModified()){
                SendApiPatchRequest("api/Projects/update");
            }
            else {
                WaitingForApiResponse = false;
                ValidationMessage = "Nejdříve změnte nějaké hodnoty předtím než budete ukládat změny!";
            }
        }
        StateHasChanged();
    }

    protected void HandleInvalidSubmit() {
        ValidationMessage = "Můžete vkládat pouze validní data!";
        StateHasChanged();
    }


    private async void SendApiPutRequest(string endpoint) {
        if (SelectedProject == null) return;

        var apiResponse = await WebUtils.SendApiPutRequest(Http, Logger, endpoint, SelectedProject);
        ResolveResponse(apiResponse);
    }

    private async void SendApiPatchRequest(string endpoint) {
        if (SelectedProject == null) return;

        var apiResponse = await WebUtils.SendApiPatchRequest(Http, Logger, endpoint, SelectedProject);
        ResolveResponse(apiResponse);
    }

    private void ResolveResponse(EApiHttpResponse apiResponse) {
        WaitingForApiResponse = false;
        if (apiResponse == EApiHttpResponse.Ok) {
            UriHelper.NavigateTo("/projects");
        }
        else {
            ApiException = StringResolver.ResolveApiResponse(apiResponse);
            StateHasChanged();
        }
    }

    private void ReturnToProjects() {
        UriHelper.NavigateTo("/projects");
    }

    protected override void OnInitialized() {
        ProjectContainer.OnStateChange += StateHasChanged;
    }

    public void Dispose() {
        ProjectContainer.OnStateChange -= StateHasChanged;
    }

}