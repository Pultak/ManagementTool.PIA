@page "/projects/userAssign/{ReturnEndpoint:int}"

@using ManagementTool.Client.Utils
@using ManagementTool.Shared.Models.Presentation
@using ManagementTool.Shared.Models.Presentation.Api.Payloads
@using ManagementTool.Shared.Models.Presentation.Api.Requests
@using ManagementTool.Shared.Models.Utils
@inherits InteractivePageBase<ProjectAssign>

@inject HttpClient Http
@inject StateContainer<ProjectInfoPayload> ProjectContainer


<button @onclick="Return">
    <!--Return icon-->
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
    </svg>
</button>
<h3>Přiřazování uživatelů ke zvolenému projektu</h3>


@if (!IsAuthorized) {
    <div>Vypadá to, že nemáte dostatečné práva na zobrazení tohoto listu!</div>
}
else {
    @if (DataFetchFailed) {
        <p>Nebyli nalezeni žádní uživatelé, které by bylo možné přiřadit k projektu!</p>
    }

    @if (WaitingForApiResponse) {
        <div class="spinner"></div>
    }
    else {
        <div class="container">
            <div class="row">
                <div class="col-sm">Jméno zvoleného projektu: </div>
                <div class="col-sm">
                    <b>@SelectedProjectInfo.Project.ProjectName</b>
                </div>
            </div>


            <div class="row">
                <label>Přiřazení uživatelé k projektu</label>
                <select class="form-control" multiple @onchange="@AssignedUsersSelectionChanged">
                    @foreach (var userPair in UsersDictionary.Where(user => user.Value.IsAssigned)) {
                        <option value="@userPair.Key">
                            @userPair.Value.DataModel.FullName
                        </option>
                    }
                </select>
                <button type="submit" @onclick="@UnassignUsersFromProject" class="btn btn-primary">Odebrat zvolené z projektu</button>
            </div>
            <div class="row">
                <label>Nepřiřazení uživatelé k projektu</label>
                <select class="form-control" multiple @onchange="@UnassignedUsersSelectionChanged">
                    @foreach (var userPair in UsersDictionary.Where(user => !user.Value.IsAssigned)) {
                        <option value="@userPair.Key">
                            @userPair.Value.DataModel.FullName
                        </option>
                    }
                </select>
                <button type="submit" @onclick="@AssignUsersToProject" class="btn btn-primary">Přidat zvolené do projektu</button>
            </div>

            @if (ExceptionMessage != null) {
                <div class="row">
                    <p>@ExceptionMessage</p>
                </div>
            }
        </div>
        <button type="button" class="btn btn-light"
                @onclick="@Return">
            Zpět
        </button>
    }
}

@code {

    /// <summary>
    /// type of endpoint we should return to
    /// </summary>
    [Parameter]
    public int ReturnEndpoint { get; set; }

    /// <summary>
    /// Dictionary of all users possibly assigned to project
    /// </summary>
    public Dictionary<long, DataModelAssignmentPL<UserBasePL>> UsersDictionary = new();

    /// <summary>
    /// Project that we are assigning users to
    /// </summary>
    public ProjectInfoPayload SelectedProjectInfo = new() {
        Project = new ProjectPL{Id = 0, ProjectName = "" }
    };
    /// <summary>
    /// Selected users from multi select that will be unassigned from the project on button click
    /// </summary>
    public string[] SelectedUsersFromAssigned { get; set; } = Array.Empty<string>();


    /// <summary>
    /// Selected users from multi select that will be assigned to the project on button click
    /// </summary>
    public string[] SelectedUsersFromUnassigned { get; set; } = Array.Empty<string>();

    private bool DataFetchFailed { get; set; }

    protected override void OnInitialized() {
        ReturnUri = $"/projects/{(ProjectPage)ReturnEndpoint}".ToLower();
        NeededRoles = new[] { RoleType.Secretariat };
        base.OnInitialized();
    }


    protected override async Task OnInitializedAsync() {
        if (ProjectContainer.Value == null) {
            //project cant be null when trying to assign users to project
            ExceptionMessage = "Nedošlo ke správnému předání instance projektu! " +
                                "Zkuste znovu zvolit žádaný projekt, nebo restartovat stránku!";
        }
        else {
            SelectedProjectInfo = ProjectContainer.Value;
        }
        if (IsAuthorized && SelectedProjectInfo.Project.Id != 0) {
            //get all project assignments and even those that are not assigned
            var result = await Http.SendApiGetRequestAsync<List<DataModelAssignmentPL<UserBasePL>>?>(
                Logger, $"api/Projects/{SelectedProjectInfo.Project.Id}/users/assignations");

            if (result is { status: ApiHttpResponse.Ok,response: { } }) {
                UsersDictionary = result.response.ToDictionary(x => x.DataModel.Id, x => x);
            }
            else {
                DataFetchFailed = true;
                if (result.status == ApiHttpResponse.Ok) {
                    ExceptionMessage = "API server poslal prázdné data!";
                }
                else {
                    ExceptionMessage = StringResolver.ResolveApiResponse(result.status);
                }
            }
        }
        WaitingForApiResponse = false;

        StateHasChanged();
    }



    /// <summary>
    /// Event handler for change of project assigned users selection
    /// </summary>
    /// <param name="e"></param>
    private void AssignedUsersSelectionChanged(ChangeEventArgs e) {
        var value = e.Value;
        if (value is string[]strings) {
            SelectedUsersFromAssigned = strings;
        }
    }


    /// <summary>
    /// Event handler for change of project unassigned users selection
    /// </summary>
    /// <param name="e"></param>
    private void UnassignedUsersSelectionChanged(ChangeEventArgs e) {
        var value = e.Value;
        if (value != null) {
            SelectedUsersFromUnassigned = (string[])value;
        }
    }
    
    private void UnassignUsersFromProject() {
        WaitingForApiResponse = true;
        ExceptionMessage = null;

        foreach (var newlyUnassigned in SelectedUsersFromAssigned) {
            var id = long.Parse(newlyUnassigned);

            UsersDictionary[id].IsAssigned = false;
        }
        //create and send request to unassign users from the project
        var payload = new ProjectAssignRequest {
            AssignedUsers = UsersDictionary.Where(x => x.Value.IsAssigned).
                Select(x => x.Value.DataModel).ToList(),
            ProjectId = SelectedProjectInfo.Project.Id
        };
        Http.SendApiPatchRequestAsync(Logger, "api/Projects/users", payload, ResolveResponse);
        StateHasChanged();
    }

    private void AssignUsersToProject() {
        WaitingForApiResponse = true;
        ExceptionMessage = null;

        foreach (var newlyAssigned in SelectedUsersFromUnassigned) {
            var id = long.Parse(newlyAssigned);

            UsersDictionary[id].IsAssigned = true;
        }
        
        //create and send request to assign users to the project
        var payload = new ProjectAssignRequest {
            AssignedUsers = UsersDictionary.Where(x => x.Value.IsAssigned).
                Select(x => x.Value.DataModel).ToList(),
            ProjectId = SelectedProjectInfo.Project.Id
        };
        Http.SendApiPatchRequestAsync(Logger, "api/Projects/users", payload, ResolveResponse);
        StateHasChanged();
    }


    /// <summary>
    /// Method used to resolve the asynchronous call of the httpClient
    /// </summary>
    /// <param name="apiResponse">response from the httpClient</param>
    /// <param name="changePage">indicator to change page if requested</param>
    protected override void ResolveResponse(ApiHttpResponse apiResponse, bool changePage) {
        WaitingForApiResponse = false;
        ExceptionMessage = StringResolver.ResolveApiResponse(apiResponse);

        StateHasChanged();
    }

}