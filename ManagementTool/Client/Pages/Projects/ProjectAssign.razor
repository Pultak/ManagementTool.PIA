@page "/projects/userAssign/{ReturnEndpoint:int}"

@using ManagementTool.Shared.Models.Database
@using ManagementTool.Shared.Models.AppState
@using ManagementTool.Shared.Models.Utils
@using ManagementTool.Shared.Utils
@using ManagementTool.Client.Utils
@using ManagementTool.Shared.Models.ApiModels
@using ManagementTool.Shared.Models.Login

@implements IDisposable

@inject NavigationManager UriHelper
@inject HttpClient Http
@inject ILogger<ProjectAssign> Logger
@inject StateContainer<Project> ProjectContainer
@inject StateContainer<LoggedUserPayload> LoggedUserContainer


<button @onclick="ReturnToProjects">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
    </svg>
</button>
<h3>Přiřazování uživatelů ke zvolenému projektu</h3>


@if (!IsAuthorized) {
    <div>Vypadá to, že nemáte dostatečné práva na zobrazení tohoto listu!</div>
}
else {
    
    @if (DataFetchFailed) {
        <p>Nebyli nalezeni žádní uživatelé, které by bylo možné přiřadit k projektu!</p>
    }

    @if (WaitingForApiResponse) {
        <div class="spinner"></div>
    }
    else {
        <div class="container">
            <div class="row">
                <div class="col-sm">Jméno zvoleného projektu: </div>
                <div class="col-sm">
                        <b>@SelectedProject.ProjectName</b>
                </div>
            </div>


            <div class="row">
                <label>Přiřazení uživatelé k projektu</label>
                <select class="form-control" multiple @onchange="@AssignedUsersSelectionChanged">
                    @foreach (var userPair in UsersDictionary.Where(user => user.Value.IsAssigned)) {
                        <option value="@userPair.Key">
                            @userPair.Value.DataModel.FullName
                        </option>
                    }
                </select>
                <button type="submit" @onclick="@UnassignUsersFromProject" class="btn btn-primary">Odebrat zvolené z projektu</button>
            </div>
            <div class="row">
                <label>Nepřiřazení uživatelé k projektu</label>
                <select class="form-control" multiple @onchange="@UnassignedUsersSelectionChanged">
                    @foreach (var userPair in UsersDictionary.Where(user => !user.Value.IsAssigned)) {
                        <option value="@userPair.Key">
                            @userPair.Value.DataModel.FullName
                        </option>
                    }
                </select>
                <button type="submit" @onclick="@AssignUsersToProject" class="btn btn-primary">Přidat zvolené do projektu</button>
            </div>
            
            @if (ValidationMessage != null) {
                <div class="row">
                    <p>@ValidationMessage</p>
                </div>
            }
        </div>
        <button type="button" class="btn btn-light"
                @onclick="@ReturnToProjects">
            Zpět
        </button>
    }




}
@code {

    [Parameter]
    public int ReturnEndpoint { get; set; }

    private bool IsAuthorized => UserUtils.IsUserAuthorized(LoggedUserContainer.Value, ERoleType.Secretariat);
    
    public Dictionary<long, DataModelAssignment<UserBase>> UsersDictionary = new();
    public Project SelectedProject = new(){Id = 0, ProjectName = ""};

    public string[] SelectedUsersFromAssigned { get; set; } = Array.Empty<string>();
    public string[] SelectedUsersFromUnassigned { get; set; } = Array.Empty<string>();


    private string? ValidationMessage { get; set; }

    private bool DataFetchFailed { get; set; }
    private bool WaitingForApiResponse { get; set; } = true;

    
    protected override async Task OnInitializedAsync() {
        if (ProjectContainer.Value == null) {
            ValidationMessage = "Nedošlo ke správnému předání instance projektu! Zkuste znovu zvolit žádaný projekt, nebo restartovat stránku";
        }
        else {
            SelectedProject = ProjectContainer.Value;
        }
        if (IsAuthorized && SelectedProject.Id != 0) {
            var result = await Http.SendApiGetRequestAsync<List<DataModelAssignment<UserBase>>?>(Logger, $"api/Users/projectUsers/{SelectedProject.Id}");

            if (result is { status: EApiHttpResponse.Ok,response: { } }) {
                UsersDictionary = result.response.ToDictionary(x => x.DataModel.Id, x => x);
            }
            else {
                DataFetchFailed = true;
                if (result.status == EApiHttpResponse.Ok) {
                    ValidationMessage = "API server poslal prázdné data!";
                }
                else {
                    ValidationMessage = StringResolver.ResolveApiResponse(result.status);
                }
            }
        }
        WaitingForApiResponse = false;
        
        StateHasChanged();
    }

    
    private void AssignedUsersSelectionChanged(ChangeEventArgs e) {
        var value = e.Value;
        if (value is string[]strings) {
            SelectedUsersFromAssigned = strings;
        }

    }
    private void UnassignedUsersSelectionChanged(ChangeEventArgs e) {
        var value = e.Value;
        if (value != null) {
            SelectedUsersFromUnassigned = (string[])value;
        }
    }
    
    private void UnassignUsersFromProject() {
        WaitingForApiResponse = true;
        ValidationMessage = null;

        foreach (var newlyUnassigned in SelectedUsersFromAssigned) {
            var id = long.Parse(newlyUnassigned);

            UsersDictionary[id].IsAssigned = false;
        }
        var payload = new ProjectAssignPayload{
            AssignedUsers = UsersDictionary.Where(x => x.Value.IsAssigned).
                Select(x => x.Value.DataModel).ToList(),
            ProjectId = SelectedProject.Id
        };
        Http.SendApiPostRequestAsync(Logger, "api/Users/assignUser", payload, ResolveResponse);
        StateHasChanged();
    }

    private void AssignUsersToProject() {
        WaitingForApiResponse = true;
        ValidationMessage = null;

        foreach (var newlyAssigned in SelectedUsersFromUnassigned) {
            var id = long.Parse(newlyAssigned);

            UsersDictionary[id].IsAssigned = true;
        }

        var payload = new ProjectAssignPayload{
            AssignedUsers = UsersDictionary.Where(x => x.Value.IsAssigned).
                Select(x => x.Value.DataModel).ToList(),
            ProjectId = SelectedProject.Id
        };
        Http.SendApiPostRequestAsync(Logger, "api/Users/assignUser", payload, ResolveResponse);
        StateHasChanged();
    }

    
    private void ResolveResponse(EApiHttpResponse apiResponse, bool changePage) {
        WaitingForApiResponse = false;
        ValidationMessage = StringResolver.ResolveApiResponse(apiResponse);
        
        StateHasChanged();
    }

    
    protected override void OnInitialized() {
        LoggedUserContainer.OnStateChange += StateHasChanged;
    }

    public void Dispose() {
        LoggedUserContainer.OnStateChange -= StateHasChanged;
    }
    
    
    private void ReturnToProjects() {
        var uri = $"/projects/{(EProjectPage)ReturnEndpoint}".ToLower();
        UriHelper.NavigateTo(uri);
    }

}
