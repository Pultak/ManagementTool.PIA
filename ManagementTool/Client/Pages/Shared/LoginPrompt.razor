@using ManagementTool.Shared.Models.Login
@using ManagementTool.Client.Utils
@using ManagementTool.Shared.Models.Presentation.Api.Payloads
@using Newtonsoft.Json
@inject HttpClient Http
@inject ILogger<LoginPrompt> Logger
@inject NavigationManager UriHelper
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

@if (string.IsNullOrEmpty(LoggedUserName)) {
    <div class="alert alert-secondary mt-4">
        <span class="oi oi-pencil me-2" aria-hidden="true"></span>
        <span class="text-nowrap">
            Vypadá to, že nejste přihlášený/á! Napravte to vyplněním přihlašovacího formuláře!
        </span>
        <EditForm id="@SubmitBtnId" EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">

            <table>
                <tr>
                    <td>Uživatelské jméno (orion)</td>
                    <td>
                        <InputText id="txtName" type="text" required
                                   @bind-Value="@AuthRequest.Username"/>
                        <ValidationMessage For="@(() => AuthRequest.Username)"/>
                    </td>
                </tr>
                <tr>
                    <td>Heslo</td>
                    <td>
                        <InputText id="txtName" type="password" required
                                   @bind-Value="@AuthRequest.Password"/>
                        <ValidationMessage For="@(() => AuthRequest.Password)"/>

                    </td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>
                        <button type="submit" form="@SubmitBtnId"
                                data-bs-toggle="modal" data-bs-target="#productModal" class="btn btn-primary">
                            Přihlásit se
                        </button>
                    </td>
                </tr>
            </table>


        </EditForm>
        <div class="modal fade @ModalClass" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true" style="display: @ModalDisplay">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="productTitle">@DialogSignature</h5>
                    </div>
                    <div class="modal-body">
                        <div class="card">
                            <div class="card-body">
                                <button type="button" data-bs-dismiss="modal" aria-label="Ok" @onclick="OkPressed">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                    </div>
                </div>
            </div>
        </div>


        <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display: @ModalDisplay">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Přihlášení</h5>
                        <button type="button" data-dismiss="modal" aria-label="Close" @onclick="OkPressed">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>@DialogSignature</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="OkPressed">Ok</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
}

@code {

    [CascadingParameter]
    public string? LoggedUserName { get; set; }

    public const string SubmitBtnId = "submitButton";

    public AuthRequest AuthRequest { get; set; } = new();

    private EditContext? EditContext { get; set; }


    public string? DialogSignature { get; set; } = null;

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool LoggedIn { get; set; } = false;


    protected override void OnInitialized() {
        EditContext = new EditContext(AuthRequest);
        base.OnInitialized();
    }


    public void OkPressed() {
        ChangeDialogSignature(null);
        DialogSignature = null;

        ModalDisplay = "none";
        ModalClass = "";
        InvokeAsync(StateHasChanged);
        if (LoggedIn) {
            UriHelper.NavigateTo(UriHelper.Uri, true);
        }
    }

    private void HandleValidSubmit() {
        _ = Http.CallLoginApiAsync(SessionStorage, Logger, ChangeDialogSignature, AuthRequest);
    }

    protected void HandleInvalidSubmit() {
        ChangeDialogSignature(AuthResponse.BadRequest);
        StateHasChanged();
    }


    private void ChangeDialogSignature(AuthResponse? authResponse) {
        if (authResponse == null) {
            DialogSignature = null;
        }
        else {
            DialogSignature = StringResolver.ResolveAuthenticationResponse(authResponse);
        }

        if (authResponse is AuthResponse.Success or AuthResponse.AlreadyLoggedIn) {
            LoggedIn = true;
        }

        ModalDisplay = "block;";
        ModalClass = "Show";
        StateHasChanged();
    }


}