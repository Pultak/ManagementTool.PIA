@page "/users"
@using ManagementTool.Shared.Models.AppState
@using ManagementTool.Shared.Models.Database
@using ManagementTool.Shared.Models.Utils
@using ManagementTool.Shared.Utils
@using ManagementTool.Client.Utils
@using ManagementTool.Shared.Models.Login


@implements IDisposable

@inject HttpClient Http
@inject NavigationManager UriHelper
@inject StateContainer<UserBase> UserContainer
@inject ILogger<UsersView> Logger
@inject StateContainer<LoggedUserPayload> LoggedUserContainer

<h3>Uživatelé</h3>

<p>Na následující stránce naleznete všechny zaregistrované uživatele.
    S dostatečným oprávněním je zde také možné je libovolně přidávat a odebírat.</p>

@if(!IsAuthorized) {
    <div>Vypadá to, že nemáte dostatečné práva na zobrazení tohoto listu!</div>
}
else {
    @if (WaitingForApiResponse) {
        <div class="spinner"></div>
    }else if(_exceptionMessage != null){
        <div>Nepovedlo se načíst data z API serveru @_exceptionMessage</div>
    }
    else {

        <button @onclick="CreateNewUser">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
            </svg>
        </button>

        
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-primary">
                <tr>
                    <th>Orion</th>
                    <th>Jméno</th>
                    <th>Pracovní středisko</th>
                    <th>E-mailová adresa</th>
                    <th>Editace</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var user in _users) {
                    <tr>
                        <td>@user.Username</td>
                        <td>@user.FullName</td>
                        <td>@user.PrimaryWorkplace</td>
                        <td>@user.EmailAddress</td>
                        <td>
                            <button @onclick="_ => NavigateToEditMode(user)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001zm-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708l-1.585-1.585z"/>
                                </svg>
                            </button></td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
}





@code {


    [CascadingParameter]
    public string? LoggedUserName { get; set; }

    private UserBase[] _users = Array.Empty<UserBase>();

    private string? _exceptionMessage;

    private bool IsAuthorized => UserUtils.IsUserAuthorized(LoggedUserContainer.Value, ERoleType.Secretariat);
    
    private bool WaitingForApiResponse { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        UserContainer.OnStateChange += StateHasChanged;
        if (IsAuthorized) {
            var result = await Http.SendApiGetRequestAsync<UserBase[]>(Logger, "api/Users");
            if (result.status != EApiHttpResponse.Ok) {
                _exceptionMessage = StringResolver.ResolveApiResponse(result.status);
            }
            else if (result.response != null) {
                _users = result.response;
            }
        }
        WaitingForApiResponse = false;
        StateHasChanged();
    }

    private void CreateNewUser() {
        UserContainer.SetValue(null);
        NavigateToEditMode(null);
    }

    private void NavigateToEditMode(UserBase? selectedUser) {
        UserContainer.SetValue(selectedUser);
        UriHelper.NavigateTo("/users/edit");
    }
    
    public void Dispose() {
        UserContainer.OnStateChange -= StateHasChanged;
    }

}
