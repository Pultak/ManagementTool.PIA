@page "/users/edit"

@using ManagementTool.Client.Utils
@using ManagementTool.Shared.Models.Presentation
@using ManagementTool.Shared.Models.Presentation.Api.Requests
@using ManagementTool.Shared.Models.Utils
@using ManagementTool.Shared.Utils
@inherits InteractivePageBase<UserEdit>

@inject HttpClient Http
@inject StateContainer<UserBasePL> UserContainer
@inject IJSRuntime JsRuntime


<button @onclick="Return">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
    </svg>
</button>

@if (!IsAuthorized) {
    <div>Vypadá to, že nemáte dostatečné práva na zobrazení tohoto listu!</div>
}
else if (WaitingForApiResponse) {
    <div class="spinner"></div>
}
else {
    @if (NewUserCreation) {
        <h3>Vytváření nového uživatele</h3>
    }
    else {
        <h3>Editace uživatele</h3>
    }

    <div>
        <section>
            <EditForm id="@SubmitBtnId" EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <DataAnnotationsValidator/>
                <table>
                    <tr>
                        <td>Uživatelské jméno (orion)</td>
                        <td>
                            @if (NewUserCreation) {
                                <InputText id="txtName" type="text" required
                                           @bind-Value="SelectedUser.Username"/>
                                <ValidationMessage For="@(() => SelectedUser.Username)"/>
                            }
                            else {
                                <b>@SelectedUser.Username</b>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>Celé jméno uživatele</td>
                        <td>
                            <InputText id="txtFullName" type="text" required
                                       @bind-Value="SelectedUser.FullName"/>
                            <ValidationMessage For="@(() => SelectedUser.FullName)"/>
                        </td>
                    </tr>
                    <tr>
                        <td>Pracoviště</td>
                        <td>
                            <InputText id="txtWorkplace" type="text" required
                                       @bind-Value="SelectedUser.PrimaryWorkplace"/>
                            <ValidationMessage For="@(() => SelectedUser.PrimaryWorkplace)"/>
                        </td>
                    </tr>
                    <tr>
                        <td>E-mailová adresa</td>
                        <td>
                            <InputText id="txtWorkplace" type="text" required
                                       @bind-Value="@SelectedUser.EmailAddress"/>
                            <ValidationMessage For="@(() => SelectedUser.EmailAddress)"/>
                        </td>
                    </tr>
                    <tr>
                        <td>Aktuálně přiřazený vedoucí</td>
                        <td>
                            @if (AllSuperiors.Length == 0) {
                                <div>Neexistují žádní uživatelé s rolí nadřazeného</div>
                            }
                            else {
                                <select multiple @onchange="@OnSelectedSuperiorsChange">
                                    @foreach (var superior in AllSuperiors) {
                                        <option value="@superior.Id" selected=@_selectedSuperiorsIds.Contains(superior.Id.ToString())>
                                            @superior.FullName
                                        </option>
                                    }
                                </select>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>Přiřazené role</td>
                        <td>
                            @foreach (var role in RolesAssignments) {
                                <input class="form-check-input" type="checkbox" name="@role.DataModel.Name"
                                       checked="@role.IsAssigned" @oninput="x => RoleAssignmentChanged(x, role)">
                                <label class="form-check-label">
                                    @role.DataModel.Name
                                </label>
                                <br>
                            }

                        </td>
                    </tr>
                </table>
            </EditForm>


        </section>
    </div>


    @if (ExceptionMessage != null) {
        <div>
            <p>@ExceptionMessage</p>
        </div>
    }
    <p>
        @if (NewUserCreation) {
            <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Vytvořit uživatele</button>
        }
        else {
            <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Uložit změny</button>
            <button @onclick="DeleteUser" class="btn btn-primary">
                Odstranit uživatele
            </button>
        }
        <button type="button" class="btn btn-light"
                @onclick="@Return">
            Zrušit
        </button>
    </p>
}
@if (NewUserCreation) {
    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display: @ModalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                @if (WaitingForApiResponse) {
                    <div class="spinner"></div>
                }
                else {
                    <div class="modal-header">
                        <h5 class="modal-title">Nový uživatel</h5>
                        <button type="button" data-dismiss="modal" aria-label="Close" @onclick="OkPressed">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Pro nového uživatele @SelectedUser.Username bylo vygenerováno heslo: <b>@NewPwd</b></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="OkPressed">Ok</button>
                    </div>
                }

            </div>
        </div>
    </div>
}


@code {
    private string ModalClass { get; set; } = "";
    private string ModalDisplay { get; set; } = "none;";

    private EditContext? EditContext { get; set; }
    private string[] _selectedSuperiorsIds = { };


    public UserBasePL SelectedUser { get; set; } = new();
    public UserBasePL[] AllSuperiors { get; set; } = Array.Empty<UserBasePL>();
    public List<DataModelAssignmentPL<RolePL>> RolesAssignments { get; set; } = new();

    public string? NewPwd { get; set; }

    private bool NewUserCreation { get; set; }

    protected override void OnInitialized() {
        UserContainer.OnStateChange += StateHasChanged;
        ReturnUri = "/users";

        base.OnInitialized();
    }


    protected override async Task OnInitializedAsync() {
        NewUserCreation = UserContainer.Value == null;
        if (!NewUserCreation) {
            SelectedUser = UserContainer.Value!;
        }
        EditContext = new EditContext(SelectedUser);
        if (IsAuthorized) {
            await GetData();
        }
        NewPwd = null;
        await base.OnInitializedAsync();
    }


    private async Task GetData() {
        var userResult = await Http.SendApiGetRequestAsync<UserBasePL[]?>(Logger, "api/Users/superiors");
        if (userResult.status != ApiHttpResponse.Ok) {
            ExceptionMessage = StringResolver.ResolveApiResponse(userResult.status);
        }
        else {
            if (userResult.response != null) {
                AllSuperiors = userResult.response;
            }
        }

        var roleResult = await Http.SendApiGetRequestAsync<List<DataModelAssignmentPL<RolePL>>?>(Logger, $@"api/Users/{SelectedUser.Id}/roles");
        if (roleResult.status != ApiHttpResponse.Ok) {
            ExceptionMessage = StringResolver.ResolveApiResponse(userResult.status);
        }
        else {
            if (roleResult.response != null) {
                RolesAssignments = roleResult.response;
            }
        }

        if (!NewUserCreation) {
        //get also all new user assigned superiors
            var userSupsResult = await Http.SendApiGetRequestAsync<long[]>(Logger, $"api/Users/{SelectedUser.Id}/superiors");

            if (userSupsResult.status != ApiHttpResponse.Ok) {
                ExceptionMessage = StringResolver.ResolveApiResponse(userResult.status);
            }
            else {
                if (userSupsResult.response != null) {
                    var assignedSups = AllSuperiors.Where(x => userSupsResult.response.Contains(x.Id)).ToList();

                    _selectedSuperiorsIds = assignedSups.Select(x => x.Id.ToString()).ToArray();
                }
            }
        }
    }

    private void OnSelectedSuperiorsChange(ChangeEventArgs evt) {
        if (evt.Value is not string[]strings) {
            return;
        }
        _selectedSuperiorsIds = strings;
    }

    private void RoleAssignmentChanged(ChangeEventArgs e, DataModelAssignmentPL<RolePL> roleAssign) {
    // get the checkbox state
        if (e.Value is not bool check) {
            return;
        }
        roleAssign.IsAssigned = check;
    }

    private void HandleValidSubmit() {
        ExceptionMessage = null;
        var valResult = UserUtils.ValidateUser(SelectedUser);
        if (valResult != UserCreationResponse.Ok) {
            ExceptionMessage = StringResolver.ResolveUserValidation(valResult);
        }
        else {
            WaitingForApiResponse = true;
            var assigned = AllSuperiors.Where(x => _selectedSuperiorsIds.Contains(x.Id.ToString()));
            if (NewUserCreation) {
                NewPwd = UserUtils.CreateRandomString(10);
                UserCreationRequest newUserRequest = new(SelectedUser, RolesAssignments, assigned.ToList(), NewPwd);
                _ = Http.SendApiPostRequestAsync(Logger, "api/Users", newUserRequest, ResolveResponse);
            }
            else {
                UserUpdateRequest payload = new(SelectedUser, RolesAssignments, assigned.ToList());
                Http.SendApiPatchRequestAsync(Logger, "api/Users", payload, ResolveResponse);
            }
        }
        StateHasChanged();
    }

    protected void HandleInvalidSubmit() {
        ExceptionMessage = "Můžete vkládat pouze validní data!";
        StateHasChanged();
    }


    private async void DeleteUser() {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Doopravdy chcete odstranit tento úkol?");
        if (confirmed) {
            ExceptionMessage = null;
            WaitingForApiResponse = true;
            Http.SendApiDeleteRequestAsync(Logger, "api/Users/" + SelectedUser.Id, ResolveResponse);
            StateHasChanged();
        }
    }


    /// <summary>
    /// Method used to resolve the asynchronous call of the httpClient
    /// </summary>
    /// <param name="apiResponse">response from the httpClient</param>
    /// <param name="changePage">indicator to change page if requested</param>
    protected override void ResolveResponse(ApiHttpResponse apiResponse, bool changePage) {
        WaitingForApiResponse = false;
        if (apiResponse == ApiHttpResponse.Ok) {
            if (changePage) {
                Return();
            }
            else {
                ModalDisplay = "block;";
                ModalClass = "Show";
            }
        }
        else {
            ExceptionMessage = StringResolver.ResolveApiResponse(apiResponse);
        }
        StateHasChanged();
    }


    public void OkPressed() {
        ModalDisplay = "none";
        ModalClass = "";
        WaitingForApiResponse = false;
        ExceptionMessage = null;
        Return();
    }


    public override void Dispose() {
        UserContainer.OnStateChange -= StateHasChanged;
        base.Dispose();
    }

}