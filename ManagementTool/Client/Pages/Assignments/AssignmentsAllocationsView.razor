@page "/assignments/allocations"

@using ManagementTool.Client.Utils
@using ManagementTool.Shared.Models.Presentation
@using ManagementTool.Shared.Models.Presentation.Api.Payloads
@using ManagementTool.Shared.Models.Utils
@using ManagementTool.Shared.Utils
@using System.ComponentModel.DataAnnotations
@inherits InteractivePageBase<AssignmentsAllocationsView>

@inject HttpClient Http

@if (!IsAuthorized) {
    <div>Vypadá to, že nemáte dostatečné práva na zobrazení této stránky!</div>
}
else {
    <h3>Zobrazení vytíženosti</h3>
    <p>Na následující stránce je možné pro zvolené uživatele zobrazit jejich pracovní vytížení v časovém rozmezí. </p>
    <p> Kde 0 je žádné vytížení a 1 je plné (8 pracovních hodin).</p>

    <p>Po zadání a zaslání parametrů na server, se zobrazí tabulka v jejíž hlavičce jsou zobrazeny zvolené datumy. </p>
    <p> Tělo pak pro každý sloupeček obsahuje nejdříve pracovní vytížení aktivních úkolů a druhý záznam je pro všechny (i neaktivní). </p>


    <table>
        <tr>
            <td>Uživatelé</td>
            <td>
                <select class="form-control" multiple @onchange="@UsersSelectionChanged">
                    @foreach (var user in AllUsers) {
                        <option value="@user.Id">
                            @user.FullName
                        </option>
                    }
                </select>
            </td>

        </tr>
        <tr>
            <td>
                Datum od
            </td>
            <td>
                <input id="txtDate" type="date" @bind-value="@FromDate" min="01/01/1970" Format="dd/MM/yyyy"/>
            </td>

        </tr>
        <tr>
            <td>
                Datum do
            </td>
            <td>
                <input id="txtDate" type="date" @bind-value="@ToDate" min="01/01/1970" Format="dd/MM/yyyy"/>
            </td>
        </tr>
    </table>
    @if (WaitingForApiResponse) {
        <div class="spinner"></div>
    }
    else {
        <button type="submit" class="btn btn-primary" @onclick="@HandleSubmit">Vytvořit uživatele</button>
    }
    @if (ExceptionMessage != null) {
        <div>@ExceptionMessage</div>
    }


    @if (Days.Length > 0) {
        <div class="table-responsive">
            <table class="table table-bordered w-auto table-sm">
                <thead>
                <tr>
                    <th class="text-center">Jméno pracovníka</th>
                    @foreach (var day in Days) {
                        <th colspan="2" class="text-center col">@day.ToString("dd.MM.")</th>
                    }
                </tr>
                </thead>
                <tbody>

                @foreach (var userWorkload in Workloads) {
                    <tr>
                        <td>@userWorkload.UserFullName</td>
                        @for (var i = 0; i < userWorkload.AllWorkload.Length; ++i) {
                            <td class="@GetColumnColorForLoad(userWorkload.ActiveWorkload[i])">@Math.Round(userWorkload.ActiveWorkload[i], 2)</td>
                            <td class="@GetColumnColorForLoad(userWorkload.AllWorkload[i])">@Math.Round(userWorkload.AllWorkload[i], 2)</td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
}

@code {
    public UserBasePL[] AllUsers = Array.Empty<UserBasePL>();

    public string[] SelectedUsers { get; set; } = Array.Empty<string>();

    [Required]
    public DateTime? FromDate { get; set; } = DateTime.Now;

    [Required]
    public DateTime? ToDate { get; set; } = DateTime.Now.AddDays(1);


    public UserWorkload[] Workloads { get; set; } = Array.Empty<UserWorkload>();
    public DateTime[] Days = Array.Empty<DateTime>();

    protected override void OnInitialized() {
        NeededRoles = new[] { RoleType.DepartmentManager, RoleType.ProjectManager };
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync() {
        if (IsAuthorized) {
            var req = await Http.SendApiGetRequestAsync<UserBasePL[]>(Logger, "api/Users");

            if (req.status != ApiHttpResponse.Ok) {
                ExceptionMessage = StringResolver.ResolveApiResponse(req.status);
                StateHasChanged();
            }
            if (req.response != null) {
                AllUsers = req.response;
            }
        }

        await base.OnInitializedAsync();
    }


    private void UsersSelectionChanged(ChangeEventArgs e) {
        var value = e.Value;
        if (value is string[]strings) {
            SelectedUsers = strings;
        }
    }


    private async void HandleSubmit() {
        ExceptionMessage = null;

        var valid = AssignmentUtils.ValidateWorkloadPayload(SelectedUsers, FromDate, ToDate);
        if (valid == WorkloadValidation.Ok) {
            WaitingForApiResponse = true;
            var selectedIds = "ids=" + string.Join("&ids=", SelectedUsers);
            var fromDate = FromDate!.Value.ToString("dd-MM-yyyy");
            var toDate = ToDate!.Value.ToString("dd-MM-yyyy");

            var uri = $"api/Assignments/workloads/{fromDate}/{toDate}?{selectedIds}";
            var userResult = await Http.SendApiGetRequestAsync<UserWorkloadPayload>(Logger, uri);
            if (userResult.status != ApiHttpResponse.Ok) {
                ExceptionMessage = StringResolver.ResolveApiResponse(userResult.status);
            }
            else {
                Days = userResult.response?.Dates ?? Array.Empty<DateTime>();
                Workloads = userResult.response?.Workloads ?? Array.Empty<UserWorkload>();
            }
        }
        else {
            ExceptionMessage = StringResolver.ResolveWorkloadValidation(valid);
        }
        WaitingForApiResponse = false;
        StateHasChanged();
    }

    private static string GetColumnColorForLoad(double load) {
        return load switch {
            > 1 => "table-danger",
            > 0.75 => "table-warning",
            > 0.40 => "table-secondary",
            _ => "table-success"
            };
    }

}