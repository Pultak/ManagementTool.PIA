@page "/assignments/edit/{ReturnEndpoint:int}"
@using ManagementTool.Client.Utils
@using ManagementTool.Shared.Models.ApiModels
@using ManagementTool.Shared.Models.AppState
@using ManagementTool.Shared.Models.Database
@using ManagementTool.Shared.Models.Login
@using ManagementTool.Shared.Models.Utils
@using ManagementTool.Shared.Utils
@using System.ComponentModel.DataAnnotations


@inject HttpClient Http
@inject NavigationManager UriHelper
@inject StateContainer<AssignmentWrapper> AssignmentContainer
@inject StateContainer<LoggedUserPayload> LoggedUserContainer
@inject ILogger<AssignmentEdit> Logger
@inject IJSRuntime JsRuntime


<button @onclick="ReturnToAssignments">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
    </svg>
</button>

@if (!IsAuthorized) {
    <div>Vypadá to, že nemáte dostatečné práva na zobrazení této stránky!</div>
}
else if (WaitingForApiResponse) {
    <div class="spinner"></div>
}
else {
    @if (NewAssignmentCreation) {
        <h3>Vytváření nového úkolu</h3>
    }
    else {
        <h3>Editace úkolu</h3>
    }

    <div>
        <section>
            <EditForm id="@SubmitBtnId" EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <DataAnnotationsValidator/>
                <table>

                    <tr>
                        <td>
                            Název úkolu
                        </td>
                        <td>
                            <InputText id="txtName" type="text" required @bind-Value="@SelectedAssignment.Assignment.Name"/>
                            <ValidationMessage For="@(() => SelectedAssignment.Assignment.Name)"/>
                        </td>

                    </tr>

                    <tr>
                        <td>
                            Projekt: @SelectedAssignment.ProjectName
                        </td>
                        <td>
                            <select @onchange="OnSelectedProjectChange">
                                <option value=0 disabled selected hidden>
                                    @if (NewAssignmentCreation) {
                                        <b>[projekt zatím nezvolen]</b>
                                    }
                                    else {
                                        @SelectedAssignment.ProjectName
                                    }

                                </option>
                                @foreach (var project in AllProjects) {
                                    <option value="@project.Id">
                                        @project.ProjectName
                                    </option>
                                }
                            </select>
                            <ValidationMessage For="@(() => SelectedProject)"/>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Datum od
                        </td>
                        <td>
                            <input id="txtDate" type="date" @bind-value="@SelectedAssignment.Assignment.FromDate" min="01/01/1970" Format="dd/MM/yyyy"/>
                            <ValidationMessage For="@(() => SelectedAssignment.Assignment.FromDate)"/>

                        </td>

                    </tr>
                    <tr>
                        <td>
                            Datum do
                        </td>
                        <td>
                            <input id="txtDate" type="date" @bind-value="@SelectedAssignment.Assignment.ToDate" min="01/01/1970" Format="dd/MM/yyyy"/>
                            <ValidationMessage For="@(() => SelectedAssignment.Assignment.ToDate)"/>
                        </td>
                    </tr>
                    <tr>


                        <td>
                            Přiřazená osoba
                        </td>
                        <td>
                            <select @onchange="@OnSelectedUserChange">
                                <option value=0 disabled selected hidden>
                                    @if (NewAssignmentCreation) {
                                        <b>[uživatel zatím nezvolen]</b>
                                    }
                                    else {
                                        @SelectedAssignment.UserName
                                    }

                                </option>
                                @foreach (var assignee in PossibleAssignees) {
                                    <option value="@assignee.Id">
                                        @assignee.FullName
                                    </option>
                                }
                            </select>
                            <ValidationMessage For="@(() => SelectedUser)"/>
                        </td>
                    </tr>
                    <tr>

                        <td>
                            Přiřazené časové kvantum
                        </td>
                        <td>
                            <InputNumber id="txtNumber" required @bind-Value="@SelectedAssignment.Assignment.AllocationScope" ParsingErrorMessage=""/>
                            <ValidationMessage For="@(() => SelectedAssignment.Assignment.AllocationScope)"/>
                        </td>
                        <td>
                            <p>FTE</p>
                        </td>
                        <td>
                            <input class="form-check-input" type="checkbox" name="FTE" @bind="FteMode">
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Popisek
                        </td>
                        <td>
                            <InputText id="txtName" type="text" required @bind-Value="@SelectedAssignment.Assignment.Note"/>
                            <ValidationMessage For="@(() => SelectedAssignment.Assignment.Note)"/>
                        </td>
                    </tr>

                    <tr>
                        <td>
                            Stav úkolu
                        </td>
                        <td>
                            <InputSelect @bind-Value="SelectedAssignment.Assignment.State">
                                @foreach (var state in Enum.GetValues(typeof(EAssignmentState))) {
                                    <option value="@state">@state</option>
                                }
                            </InputSelect>
                        </td>
                    </tr>
                </table>
            </EditForm>

            @if (ExceptionMessage != null) {
                <div>
                    <p>@ExceptionMessage</p>
                </div>
            }
            <p>
                @if (NewAssignmentCreation) {
                    <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Vytvořit projekt</button>
                }
                else {
                    <button type="submit" form="@SubmitBtnId" class="btn btn-primary">Uložit změny</button>
                    <button @onclick="DeleteAssignment" class="btn btn-primary">
                        Smazat úkol
                    </button>
                }
                <button type="button" class="btn btn-light"
                        @onclick="@ReturnToAssignments">
                    Zrušit
                </button>
            </p>

        </section>
    </div>
}


@code {

    [Parameter]
    public int ReturnEndpoint { get; set; }

    private bool IsAuthorized => UserUtils.IsUserAuthorized(LoggedUserContainer.Value, ERoleType.ProjectManager) ||
                                 UserUtils.IsUserAuthorized(LoggedUserContainer.Value, ERoleType.DepartmentManager);


        private const string SubmitBtnId = "submitButton";

    public AssignmentWrapper SelectedAssignment { get; set; } = new();
    private EditContext? EditContext { get; set; }

    public Project[] AllProjects { get; set; } = { };
    public UserBase[] PossibleAssignees { get; set; } = { };


    private bool FteMode { get; set; }


    [Required(ErrorMessage = "Projekt musí být přiřazen k úkolu!")]
    private string? SelectedProject { get; set; }

    [Required(ErrorMessage = "Uživatel musí být přiřazen k úkolu!")]
    private string? SelectedUser { get; set; }

    private bool NewAssignmentCreation { get; set; }
    private bool WaitingForApiResponse { get; set; } = true;

    private string? ExceptionMessage { get; set; }


    protected override async Task OnInitializedAsync() {
        if (AssignmentContainer.Value == null) {
            NewAssignmentCreation = true;
            SelectedAssignment = new AssignmentWrapper("", "", new Assignment());
        }
        else {
            SelectedAssignment = AssignmentContainer.Value;
        }
        if (IsAuthorized) {
            await GetData();
        }

        EditContext = new EditContext(SelectedAssignment);
        WaitingForApiResponse = false;
        StateHasChanged();
    }

    private async Task GetData() {
        var req = await Http.SendApiGetRequestAsync<Project[]?>(Logger, "api/Projects");


        if (req.status != EApiHttpResponse.Ok) {
            ExceptionMessage = StringResolver.ResolveApiResponse(req.status);
            StateHasChanged();
        }
        if (req.response != null) {
            AllProjects = req.response;
        }

        if (!NewAssignmentCreation) {
            await GetPossibleAssigneesData(SelectedAssignment.Assignment.ProjectId);
        }
    }


    private void OnSelectedProjectChange(ChangeEventArgs evt) {
        if (evt.Value is not string selectedProjectId) {
            return;
        }
        SelectedProject = selectedProjectId;
        SelectedUser = null;
        PossibleAssignees = Array.Empty<UserBase>();

        if (long.TryParse(selectedProjectId, out var resultId)) {
            SelectedAssignment.Assignment.ProjectId = resultId;
            SelectedAssignment.Assignment.UserId = 0;

            GetPossibleAssigneesData(resultId);
        }
    }


    private void OnSelectedUserChange(ChangeEventArgs evt) {
        if (evt.Value is not string selectedUserId) {
            return;
        }
        SelectedUser = selectedUserId;

        if (long.TryParse(selectedUserId, out var resultId)) {
            SelectedAssignment.Assignment.UserId = resultId;
        }
    }

    private void ReturnToAssignments() {
        var uri = $"/assignments/{(EAssignmentPage)ReturnEndpoint}".ToLower();
        UriHelper.NavigateTo(uri);
    }


    private async Task GetPossibleAssigneesData(long projectId) {
        if (projectId > 0) {
            var req = await Http.SendApiGetRequestAsync<UserBase[]>(Logger, $"api/Projects/{projectId}/users");


            if (req.status != EApiHttpResponse.Ok) {
                ExceptionMessage = StringResolver.ResolveApiResponse(req.status);
                StateHasChanged();
            }
            if (req.response != null) {
                PossibleAssignees = req.response;
            }
            StateHasChanged();
        }
    }


    private void HandleValidSubmit() {
        ExceptionMessage = null;


        var project = AllProjects.FirstOrDefault(x => x.Id == SelectedAssignment.Assignment.ProjectId);
        var user = PossibleAssignees.FirstOrDefault(x => x.Id == SelectedAssignment.Assignment.UserId);
        var valResult = AssignmentUtils.ValidateNewAssignment(SelectedAssignment.Assignment, project, user);
        if (valResult != EAssignmentCreationResponse.Ok) {
            ExceptionMessage = StringResolver.ResolveAssignmentValidation(valResult);
        }
        else {
            WaitingForApiResponse = true;
            if (FteMode) {
    //FTE is 40 hours 
                SelectedAssignment.Assignment.AllocationScope *= 40;
            }
            FteMode = false;
            if (NewAssignmentCreation) {
                Http.SendApiPutRequestAsync(Logger, "api/Assignments", SelectedAssignment.Assignment, ResolveResponse);
            }
            else if (EditContext?.IsModified() ?? false) {
                Http.SendApiPatchRequestAsync(Logger, "api/Assignments", SelectedAssignment.Assignment, ResolveResponse);
            }
            else {
                WaitingForApiResponse = false;
                ExceptionMessage = "Nejdříve změnte nějaké hodnoty předtím než budete ukládat změny!";
            }
        }
        StateHasChanged();
    }

    protected void HandleInvalidSubmit() {
        ExceptionMessage = "Můžete vkládat pouze validní data!";
        StateHasChanged();
    }


    private async void DeleteAssignment() {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Doopravdy chcete odstranit tento úkol?");
        if (confirmed) {
            ExceptionMessage = null;
            WaitingForApiResponse = true;
            Http.SendApiDeleteRequestAsync(Logger, "api/Assignments/" + SelectedAssignment.Assignment.Id, ResolveResponse);
            StateHasChanged();
        }
    }


    private void ResolveResponse(EApiHttpResponse apiResponse, bool changePage) {
        WaitingForApiResponse = false;
        if (apiResponse == EApiHttpResponse.Ok) {
            ReturnToAssignments();
        }
        else {
            ExceptionMessage = StringResolver.ResolveApiResponse(apiResponse);
            StateHasChanged();
        }
    }

}